package main

import (
	"flag"
	"fmt"
	"log"
	"os"
)

type CLI struct{}

func (cli *CLI) printUsage() {
	fmt.Println("Usage:")
	fmt.Println("  createsuper -config config.json")
	fmt.Println("  runsuper -node InitialNode.config -peers Peers.json")
}

func (cli *CLI) validateArgs() {
	if len(os.Args) < 2 {
		cli.printUsage()
		os.Exit(1)
	}
}

func (cli *CLI) Run() {
	cli.validateArgs()

	//Start a command process
	createSuperCmd := flag.NewFlagSet("createsuper", flag.ExitOnError)
	createSuperConfig := createSuperCmd.String("config", "", "Config file for create a super node")

	//Start a guard process
	runSuperCmd := flag.NewFlagSet("runsuper", flag.ExitOnError)
	runSuperNode := runSuperCmd.String("node", "", "Node Config file for running a super node. Generated By createsuper")
	runSuperPeers := runSuperCmd.String("peers", "", "Peers Config file for running a super node. Generated By createsuper")

	switch os.Args[1] {
	case "createsuper":
		err := createSuperCmd.Parse(os.Args[2:])
		if err != nil {
			log.Panic(err)
		}
	case "runsuper":
		err := runSuperCmd.Parse(os.Args[2:])
		if err != nil {
			log.Panic(err)
		}
	default:
		cli.printUsage()
	}

	if createSuperCmd.Parsed() {
		// Actually Generate a file for SuperNode Persistence
		if *createSuperConfig == "" {
			createSuperCmd.Usage()
			os.Exit(1)
		}
		err := CreateSuperNode(*createSuperConfig)
		if err != nil {
			log.Panic(err)
		}
		fmt.Println("Generate config file InitialNode.config")
	}

	if runSuperCmd.Parsed() {
		if *runSuperNode == "" {
			runSuperCmd.Usage()
			os.Exit(1)
		}
		if *runSuperPeers == "" {
			runSuperCmd.Usage()
			os.Exit(1)
		}
		//Don't need to change this name
		cli.RunSuper(*runSuperNode, *runSuperPeers)
	}

}
